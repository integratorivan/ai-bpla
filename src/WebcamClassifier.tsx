import { useState, useEffect, useRef } from 'preact/hooks'

interface Prediction {
  label: string
  confidence: number
}

export function WebcamClassifier() {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const [cameraEnabled, setCameraEnabled] = useState(false)
  const [modelLoaded, setModelLoaded] = useState(false)
  const [predictions, setPredictions] = useState<Prediction[]>([])
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  
  // –†–µ—Ñ—ã –¥–ª—è DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  const videoRef = useRef<HTMLVideoElement>(null)
  const canvasRef = useRef<HTMLCanvasElement>(null)
  
  // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è ml5.js
  const [classifier, setClassifier] = useState<any>(null)
  const [stream, setStream] = useState<MediaStream | null>(null)
  const [permissionGranted, setPermissionGranted] = useState<boolean | null>(null)
  const [streamUrl, setStreamUrl] = useState('')
  const [isStreamMode, setIsStreamMode] = useState(false)
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ MobileNet
  useEffect(() => {
    if (typeof ml5 !== 'undefined' && !modelLoaded) {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å MobileNet...')
      
      // ml5.imageClassifier —Å–æ–∑–¥–∞—ë—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const newClassifier = ml5.imageClassifier('MobileNet', () => {
        console.log('‚úÖ –ú–æ–¥–µ–ª—å MobileNet –∑–∞–≥—Ä—É–∂–µ–Ω–∞!')
        setModelLoaded(true)
        setClassifier(newClassifier)
      })
    }
  }, [modelLoaded])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∫–∞–º–µ—Ä—É
  const requestCameraPermission = async () => {
    try {
      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        throw new Error('MediaDevices API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ HTTPS –∏–ª–∏ –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä.')
      }

      const tempStream = await navigator.mediaDevices.getUserMedia({ video: true })
      tempStream.getTracks().forEach(track => track.stop()) // –°—Ä–∞–∑—É –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
      setPermissionGranted(true)
      console.log('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∫–∞–º–µ—Ä—É –ø–æ–ª—É—á–µ–Ω–æ')
    } catch (error) {
      setPermissionGranted(false)
      console.error('‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∫–∞–º–µ—Ä—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ:', error)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ
  const enableCamera = async () => {
    try {
      console.log('üìπ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ...')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É MediaDevices API
      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        throw new Error('MediaDevices API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ HTTPS –∏–ª–∏ –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä.')
      }
      
      // navigator.mediaDevices.getUserMedia - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–µ–± API –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ
      const mediaStream = await navigator.mediaDevices.getUserMedia({
        video: { 
          width: 640, 
          height: 480,
          facingMode: 'user' // 'user' = —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞, 'environment' = –∑–∞–¥–Ω—è—è
        }
      })

      console.log('üìπ MediaStream –ø–æ–ª—É—á–µ–Ω:', mediaStream)
      console.log('üìπ Video tracks:', mediaStream.getVideoTracks())
      
      setStream(mediaStream)
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ—Ç–æ–∫ –∫ video —ç–ª–µ–º–µ–Ω—Ç—É
      if (videoRef.current) {
        console.log('üìπ –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ—Ç–æ–∫ –∫ video —ç–ª–µ–º–µ–Ω—Ç—É')
        videoRef.current.srcObject = mediaStream
        
        // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        videoRef.current.onloadedmetadata = () => {
          console.log('üìπ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
          console.log('üìπ –†–∞–∑–º–µ—Ä—ã –≤–∏–¥–µ–æ:', videoRef.current?.videoWidth, 'x', videoRef.current?.videoHeight)
        }
        
        videoRef.current.play()
        setCameraEnabled(true)
        console.log('‚úÖ –ö–∞–º–µ—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∞!')
      } else {
        console.error('‚ùå videoRef.current is null')
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ:', error)
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.')
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã
  const disableCamera = () => {
    if (stream) {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏ (–≤–∏–¥–µ–æ/–∞—É–¥–∏–æ)
      stream.getTracks().forEach(track => track.stop())
      setStream(null)
    }
    
    setCameraEnabled(false)
    setIsAnalyzing(false)
    setPredictions([])
    console.log('üìπ –ö–∞–º–µ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞')
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–¥—Ä–∞
  const classifyFrame = async () => {
    if (!classifier || !videoRef.current || !cameraEnabled) return
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ
    if (videoRef.current.readyState < 2) {
      console.log('‚è≥ –í–∏–¥–µ–æ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞')
      return
    }
    
    setIsAnalyzing(true)
    
    // –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–∞–¥—Ä –∏–∑ –≤–∏–¥–µ–æ –≤ canvas
    if (canvasRef.current) {
      const canvas = canvasRef.current
      const ctx = canvas.getContext('2d')
      const video = videoRef.current
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas –ø–æ —Ä–∞–∑–º–µ—Ä—É –≤–∏–¥–µ–æ
      canvas.width = video.videoWidth || 640
      canvas.height = video.videoHeight || 480
      
      // –†–∏—Å—É–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–¥—Ä –≤–∏–¥–µ–æ –Ω–∞ canvas
      ctx?.drawImage(video, 0, 0, canvas.width, canvas.height)
      
      console.log('üì∏ –ö–∞–¥—Ä –∑–∞—Ö–≤–∞—á–µ–Ω, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...')
      
      try {
        // –ü—Ä–æ–±—É–µ–º async/await –ø–æ–¥—Ö–æ–¥
        const results = await classifier.classify(canvas)
        setIsAnalyzing(false)
        console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç (async):', results)
        
        if (results && Array.isArray(results)) {
          const formattedResults = results.map((result: any) => ({
            label: result.label || result.className || 'Unknown',
            confidence: result.confidence || result.probability || 0
          }))
          setPredictions(formattedResults)
          console.log('‚úÖ –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:', formattedResults)
        } else {
          console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', results)
        }
      } catch (error) {
        setIsAnalyzing(false)
        console.error('‚ùå –û—à–∏–±–∫–∞ async –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error)
        
        // Fallback: –ø—Ä–æ–±—É–µ–º callback –ø–æ–¥—Ö–æ–¥
        classifier.classify(canvas, (err: any, results: Prediction[]) => {
          console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç (callback):', results, '–û—à–∏–±–∫–∞:', err)
          
          if (results && Array.isArray(results)) {
            const formattedResults = results.map((result: any) => ({
              label: result.label || result.className || 'Unknown',
              confidence: result.confidence || result.probability || 0
            }))
            setPredictions(formattedResults)
            console.log('‚úÖ –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (callback):', formattedResults)
          }
        })
      }
    } else {
      setIsAnalyzing(false)
      console.error('‚ùå Canvas –Ω–µ –Ω–∞–π–¥–µ–Ω')
    }
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
  useEffect(() => {
    if (!cameraEnabled || !modelLoaded) return
    
    const interval = setInterval(() => {
      classifyFrame()
    }, 2000) // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    
    return () => clearInterval(interval)
  }, [cameraEnabled, modelLoaded, classifier])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
  const loadStream = () => {
    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ:', streamUrl)
    if (!streamUrl) {
      console.error('‚ùå URL –≤–∏–¥–µ–æ –ø—É—Å—Ç–æ–π')
      return
    }
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤–∏–¥–µ–æ
    setCameraEnabled(true)
    setIsStreamMode(true)
    
    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Ä–µ–Ω–¥–µ—Ä, –∑–∞—Ç–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
    setTimeout(() => {
      if (videoRef.current) {
      console.log('üìπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ video —ç–ª–µ–º–µ–Ω—Ç–∞')
      videoRef.current.src = streamUrl
      videoRef.current.crossOrigin = 'anonymous'
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      videoRef.current.onloadstart = () => console.log('üìπ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ')
      videoRef.current.onloadedmetadata = () => {
        console.log('üìπ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
        console.log('üìπ –†–∞–∑–º–µ—Ä—ã:', videoRef.current?.videoWidth, 'x', videoRef.current?.videoHeight)
      }
      videoRef.current.oncanplay = () => console.log('üìπ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é')
      videoRef.current.onerror = (e) => console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ:', e)
      
      videoRef.current.load()
      videoRef.current.play().then(() => {
        console.log('‚úÖ –í–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ')
      }).catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error)
      })
      } else {
        console.error('‚ùå videoRef.current is null –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞')
      }
    }, 100)
  }


  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç—Ä–∏–º–∞
  const stopStream = () => {
    if (videoRef.current) {
      videoRef.current.src = ''
      videoRef.current.srcObject = null
    }
    setCameraEnabled(false)
    setIsStreamMode(false)
    console.log('üì∫ –í–∏–¥–µ–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
  }

  return (
    <div className="webcam-classifier">
      <h2>üì∏ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ –≤–µ–±-–∫–∞–º–µ—Ä—É –∏–ª–∏ —Å—Ç—Ä–∏–º</h2>
      
      {/* –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏ */}
      <div className="status">
        {!modelLoaded && <p>‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å MobileNet...</p>}
        {modelLoaded && <p>‚úÖ –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ</p>}
      </div>

      {/* –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤–∏–¥–µ–æ */}
      <div className="source-selector">
        <h3>–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –≤–∏–¥–µ–æ:</h3>
        
        {/* –°—Ç—Ä–∏–º URL */}
        <div className="stream-controls">
          <input
            type="text"
            placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ (.mp4, .webm, .mov)"
            value={streamUrl}
            onChange={(e) => setStreamUrl(e.target.value)}
            className="stream-input"
          />
          <button 
            onClick={loadStream}
            disabled={!modelLoaded || !streamUrl}
            className="btn-primary"
          >
            üì∫ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ
          </button>
          {isStreamMode && (
            <button onClick={stopStream} className="btn-secondary">
              ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∏–¥–µ–æ
            </button>
          )}
        </div>
        
        <div className="separator">–∏–ª–∏</div>
      </div>

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–æ–π */}
      <div className="camera-controls">
        {permissionGranted === null ? (
          <button 
            onClick={requestCameraPermission}
            disabled={!modelLoaded}
            className="btn-primary"
          >
            üìã –ó–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ
          </button>
        ) : permissionGranted === false ? (
          <div>
            <p>‚ùå –î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω</p>
            <button onClick={requestCameraPermission} className="btn-primary">
              üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
            </button>
          </div>
        ) : !cameraEnabled ? (
          <button 
            onClick={enableCamera} 
            disabled={!modelLoaded}
            className="btn-primary"
          >
            üé• –í–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É
          </button>
        ) : (
          <button 
            onClick={disableCamera}
            className="btn-secondary"
          >
            ‚èπÔ∏è –û—Ç–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É
          </button>
        )}
      </div>

      {/* –í–∏–¥–µ–æ —Å –∫–∞–º–µ—Ä—ã */}
      {cameraEnabled && (
        <div className="video-container">
          <video
            ref={videoRef}
            width="640"
            height="480"
            autoPlay
            muted
            playsInline
            controls
          />
          
          {/* –°–∫—Ä—ã—Ç—ã–π canvas –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–æ–≤ */}
          <canvas
            ref={canvasRef}
            style={{ display: 'none' }}
          />
          
          {/* –†—É—á–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è */}
          <div className="manual-controls">
            <button 
              onClick={classifyFrame}
              disabled={isAnalyzing || !modelLoaded}
              className="btn-analyze"
            >
              {isAnalyzing ? 'üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...' : 'üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å'}
            </button>
          </div>
        </div>
      )}

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ */}
      {predictions.length > 0 && (
        <div className="predictions">
          <h3>üéØ –ß—Ç–æ –≤–∏–¥–∏—Ç –ò–ò:</h3>
          <div className="predictions-list">
            {predictions.slice(0, 3).map((prediction, index) => (
              <div key={index} className="prediction-item">
                <span className="label">{prediction.label}</span>
                <span className="confidence">
                  {Math.round(prediction.confidence * 100)}%
                </span>
                <div className="confidence-bar">
                  <div 
                    className="confidence-fill"
                    style={{ width: `${prediction.confidence * 100}%` }}
                  />
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  )
}