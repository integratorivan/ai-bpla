import { useState, useEffect, useRef } from 'preact/hooks'

interface Prediction {
  label: string
  confidence: number
}

export function WebcamClassifier() {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const [cameraEnabled, setCameraEnabled] = useState(false)
  const [modelLoaded, setModelLoaded] = useState(false)
  const [predictions, setPredictions] = useState<Prediction[]>([])
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  
  // –†–µ—Ñ—ã –¥–ª—è DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  const videoRef = useRef<HTMLVideoElement>(null)
  const canvasRef = useRef<HTMLCanvasElement>(null)
  
  // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è ml5.js
  const [classifier, setClassifier] = useState<any>(null)
  const [stream, setStream] = useState<MediaStream | null>(null)
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ MobileNet
  useEffect(() => {
    if (typeof ml5 !== 'undefined' && !modelLoaded) {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å MobileNet...')
      
      // ml5.imageClassifier —Å–æ–∑–¥–∞—ë—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const newClassifier = ml5.imageClassifier('MobileNet', () => {
        console.log('‚úÖ –ú–æ–¥–µ–ª—å MobileNet –∑–∞–≥—Ä—É–∂–µ–Ω–∞!')
        setModelLoaded(true)
        setClassifier(newClassifier)
      })
    }
  }, [modelLoaded])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ
  const enableCamera = async () => {
    try {
      console.log('üìπ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ...')
      
      // navigator.mediaDevices.getUserMedia - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–µ–± API –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ
      const mediaStream = await navigator.mediaDevices.getUserMedia({
        video: { 
          width: 640, 
          height: 480,
          facingMode: 'user' // 'user' = —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞, 'environment' = –∑–∞–¥–Ω—è—è
        }
      })
      
      setStream(mediaStream)
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ—Ç–æ–∫ –∫ video —ç–ª–µ–º–µ–Ω—Ç—É
      if (videoRef.current) {
        videoRef.current.srcObject = mediaStream
        videoRef.current.play()
        setCameraEnabled(true)
        console.log('‚úÖ –ö–∞–º–µ—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∞!')
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ:', error)
      alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è.')
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã
  const disableCamera = () => {
    if (stream) {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏ (–≤–∏–¥–µ–æ/–∞—É–¥–∏–æ)
      stream.getTracks().forEach(track => track.stop())
      setStream(null)
    }
    
    setCameraEnabled(false)
    setIsAnalyzing(false)
    setPredictions([])
    console.log('üìπ –ö–∞–º–µ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞')
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–¥—Ä–∞
  const classifyFrame = () => {
    if (!classifier || !videoRef.current || !cameraEnabled) return
    
    setIsAnalyzing(true)
    
    // ml5.js –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç video —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–ø—Ä—è–º—É—é
    classifier.classify(videoRef.current, (error: any, results: Prediction[]) => {
      setIsAnalyzing(false)
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error)
        return
      }
      
      // results - –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å label –∏ confidence
      console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:', results)
      setPredictions(results)
    })
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
  useEffect(() => {
    if (!cameraEnabled || !modelLoaded) return
    
    const interval = setInterval(() => {
      classifyFrame()
    }, 2000) // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    
    return () => clearInterval(interval)
  }, [cameraEnabled, modelLoaded, classifier])

  return (
    <div className="webcam-classifier">
      <h2>üì∏ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ –≤–µ–±-–∫–∞–º–µ—Ä—É</h2>
      
      {/* –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏ */}
      <div className="status">
        {!modelLoaded && <p>‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å MobileNet...</p>}
        {modelLoaded && <p>‚úÖ –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ</p>}
      </div>

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–æ–π */}
      <div className="camera-controls">
        {!cameraEnabled ? (
          <button 
            onClick={enableCamera} 
            disabled={!modelLoaded}
            className="btn-primary"
          >
            üé• –í–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É
          </button>
        ) : (
          <button 
            onClick={disableCamera}
            className="btn-secondary"
          >
            ‚èπÔ∏è –û—Ç–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É
          </button>
        )}
      </div>

      {/* –í–∏–¥–µ–æ —Å –∫–∞–º–µ—Ä—ã */}
      {cameraEnabled && (
        <div className="video-container">
          <video
            ref={videoRef}
            width="640"
            height="480"
            autoPlay
            muted
            playsInline
          />
          
          {/* –†—É—á–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è */}
          <div className="manual-controls">
            <button 
              onClick={classifyFrame}
              disabled={isAnalyzing || !modelLoaded}
              className="btn-analyze"
            >
              {isAnalyzing ? 'üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...' : 'üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å'}
            </button>
          </div>
        </div>
      )}

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ */}
      {predictions.length > 0 && (
        <div className="predictions">
          <h3>üéØ –ß—Ç–æ –≤–∏–¥–∏—Ç –ò–ò:</h3>
          <div className="predictions-list">
            {predictions.slice(0, 3).map((prediction, index) => (
              <div key={index} className="prediction-item">
                <span className="label">{prediction.label}</span>
                <span className="confidence">
                  {Math.round(prediction.confidence * 100)}%
                </span>
                <div className="confidence-bar">
                  <div 
                    className="confidence-fill"
                    style={{ width: `${prediction.confidence * 100}%` }}
                  />
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  )
}