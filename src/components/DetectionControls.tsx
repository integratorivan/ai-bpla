import { useRef } from 'preact/hooks'

interface DetectionControlsProps {
  isAnalyzing: boolean
  modelLoaded: boolean
  interval: number
  onIntervalChange: (interval: number) => void
  onAnalyzeNow: () => void
}

export function DetectionControls({
  isAnalyzing,
  modelLoaded,
  interval,
  onIntervalChange,
  onAnalyzeNow
}: DetectionControlsProps) {
  const intervalRef = useRef<HTMLInputElement>(null)

  const handleIntervalChange = (e: Event) => {
    const target = e.target as HTMLInputElement
    const newInterval = parseInt(target.value)
    onIntervalChange(newInterval)
  }

  // –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
  const intervalPresets = [
    { value: 200, label: 'üöÄ –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ (0.2—Å)', fps: '5 FPS' },
    { value: 500, label: '‚ö° –ë—ã—Å—Ç—Ä–æ (0.5—Å)', fps: '2 FPS' },
    { value: 1000, label: 'üîÑ –°—Ä–µ–¥–Ω–µ (1—Å)', fps: '1 FPS' },
    { value: 2000, label: 'üêå –ú–µ–¥–ª–µ–Ω–Ω–æ (2—Å)', fps: '0.5 FPS' }
  ]

  return (
    <div className="detection-controls">
      <h4>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏</h4>
      
      {/* –ö–æ–Ω—Ç—Ä–æ–ª—å —á–∞—Å—Ç–æ—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
      <div className="control-group">
        <label htmlFor="interval-slider">
          üìà –ß–∞—Å—Ç–æ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: <strong>{1000/interval} FPS</strong> ({interval}–º—Å)
        </label>
        
        <div className="interval-controls">
          <input
            ref={intervalRef}
            id="interval-slider"
            type="range"
            min="200"
            max="3000"
            step="100"
            value={interval}
            onInput={handleIntervalChange}
            className="interval-slider"
            disabled={isAnalyzing}
          />
          
          <div className="interval-display">
            <span className="current-interval">{interval}–º—Å</span>
          </div>
        </div>

        {/* –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏ */}
        <div className="interval-presets">
          {intervalPresets.map((preset) => (
            <button
              key={preset.value}
              onClick={() => onIntervalChange(preset.value)}
              className={`preset-btn ${interval === preset.value ? 'active' : ''}`}
              disabled={isAnalyzing}
              title={`–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ${preset.fps}`}
            >
              {preset.label}
            </button>
          ))}
        </div>
      </div>

      {/* –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ */}
      <div className="control-group">
        <button 
          onClick={onAnalyzeNow}
          disabled={isAnalyzing || !modelLoaded}
          className="btn-analyze-manual"
        >
          {isAnalyzing ? 'üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...' : 'üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å'}
        </button>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ */}
      <div className="performance-info">
        <p className="info-text">
          üí° <strong>–°–æ–≤–µ—Ç:</strong> –î–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö 
          –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∞—Å—Ç–æ—Ç—É 1-2 FPS. –ù–∞ –º–æ—â–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö –º–æ–∂–Ω–æ –¥–æ 5 FPS.
        </p>
      </div>
    </div>
  )
} 