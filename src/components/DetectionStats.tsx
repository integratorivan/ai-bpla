import type { Detection, YOLOv8Detection, ModelState } from '../types/ml5'

interface DetectionStatsProps {
  detections: Detection[]
  yolov8Detections?: YOLOv8Detection[]
  isAnalyzing: boolean
  modelState?: ModelState
}

export function DetectionStats({ 
  detections, 
  yolov8Detections, 
  isAnalyzing, 
  modelState 
}: DetectionStatsProps) {
  // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–µ—Ç–µ–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏
  const currentDetections = modelState?.modelType === 'yolov8' && yolov8Detections 
    ? yolov8Detections 
    : detections

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–µ—Ç–µ–∫—Ü–∏–π
  const detectionStats = currentDetections.reduce((acc, detection) => {
    acc[detection.class] = (acc[detection.class] || 0) + 1
    return acc
  }, {} as Record<string, number>)

  const sortedStats = Object.entries(detectionStats)
    .sort(([, a], [, b]) => b - a)
    .slice(0, 10) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
  const modelName = modelState?.modelType === 'yolov8' 
    ? 'YOLOv8' 
    : modelState?.modelType === 'coco-ssd' 
    ? 'COCO-SSD' 
    : 'YOLO'

  return (
    <div class="detection-display">
      <div class="detection-header">
        <h3>üéØ –î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ {modelName}</h3>
        {isAnalyzing && <div class="analyzing-indicator">‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...</div>}
        {modelState?.modelInfo && (
          <div class="model-info-small">
            <small>üìä {modelState.modelInfo.name}</small>
          </div>
        )}
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–π */}
      {currentDetections.length > 0 ? (
        <div class="detection-stats">
          <h4>üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {currentDetections.length}</h4>
          <div class="stats-grid">
            {sortedStats.map(([className, count]) => (
              <div key={className} class="stat-item">
                <span class="stat-class">{className}</span>
                <span class="stat-count">{count}</span>
              </div>
            ))}
          </div>
        </div>
      ) : (
        <div class="no-detections">
          <p>üîç –û–±—ä–µ–∫—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã</p>
          <small>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —É–≥–æ–ª –∫–∞–º–µ—Ä—ã –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã –≤ –∫–∞–¥—Ä</small>
        </div>
      )}

      {/* –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–µ—Ç–µ–∫—Ü–∏–π */}
      {currentDetections.length > 0 && (
        <details class="detection-details">
          <summary>üîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –¥–µ—Ç–µ–∫—Ü–∏–π ({currentDetections.length})</summary>
          <div class="detection-list">
            {currentDetections.map((detection, index) => (
              <div key={index} class="detection-item">
                <div class="detection-class">
                  {detection.class}
                </div>
                <div class="detection-confidence">
                  {Math.round(detection.confidence * 100)}%
                </div>
                <div class="detection-bbox">
                  [{detection.bbox.map(coord => Math.round(coord)).join(', ')}]
                </div>
                {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è YOLOv8 */}
                {modelState?.modelType === 'yolov8' && 'area' in detection && (
                  <div class="detection-area">
                    <small>–ü–ª–æ—â–∞–¥—å: {Math.round(Number((detection as any).area) || 0)}</small>
                  </div>
                )}
              </div>
            ))}
          </div>
        </details>
      )}
    </div>
  )
} 