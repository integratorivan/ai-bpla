import { useState } from 'preact/hooks'
import type { DragState, StreamState } from '../types/ml5'

interface FileUploadProps {
  streamState: StreamState
  modelLoaded: boolean
  onFileLoad: (file: File) => void
  onStopStream: () => void
}

export function FileUpload({ 
  streamState, 
  modelLoaded, 
  onFileLoad, 
  onStopStream 
}: FileUploadProps) {
  const [dragState, setDragState] = useState<DragState>({
    isDragOver: false,
    isDragActive: false
  })

  const handleDragEnter = (e: DragEvent) => {
    e.preventDefault()
    e.stopPropagation()
    setDragState(prev => ({ ...prev, isDragOver: true, isDragActive: true }))
  }

  const handleDragLeave = (e: DragEvent) => {
    e.preventDefault()
    e.stopPropagation()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∏–Ω—É–ª–∏ –∑–æ–Ω—É –¥—Ä–æ–ø–∞
    const rect = (e.currentTarget as HTMLElement).getBoundingClientRect()
    const x = e.clientX
    const y = e.clientY
    
    if (x < rect.left || x >= rect.right || y < rect.top || y >= rect.bottom) {
      setDragState(prev => ({ ...prev, isDragOver: false, isDragActive: false }))
    }
  }

  const handleDragOver = (e: DragEvent) => {
    e.preventDefault()
    e.stopPropagation()
  }

  const handleDrop = (e: DragEvent) => {
    e.preventDefault()
    e.stopPropagation()
    
    setDragState({ isDragOver: false, isDragActive: false })
    
    const files = e.dataTransfer?.files
    if (files && files.length > 0) {
      const file = files[0]
      console.log('üìÅ –§–∞–π–ª –ø–µ—Ä–µ—Ç–∞—â–µ–Ω:', file.name, file.type)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∏–¥–µ–æ—Ñ–∞–π–ª
      if (file.type.startsWith('video/')) {
        onFileLoad(file)
      } else {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª (.mp4, .webm, .mov, .avi)')
      }
    }
  }

  const handleFileInput = (e: Event) => {
    const target = e.target as HTMLInputElement
    const files = target.files
    
    if (files && files.length > 0) {
      const file = files[0]
      console.log('üìÅ –§–∞–π–ª –≤—ã–±—Ä–∞–Ω:', file.name, file.type)
      onFileLoad(file)
    }
  }

  const getDropZoneClass = () => {
    let className = 'file-upload-zone'
    if (dragState.isDragOver) className += ' drag-over'
    if (dragState.isDragActive) className += ' drag-active'
    if (!modelLoaded) className += ' disabled'
    return className
  }

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes'
    const k = 1024
    const sizes = ['Bytes', 'KB', 'MB', 'GB']
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
  }

  return (
    <div className="file-upload-container">
      {/* Drag & Drop –∑–æ–Ω–∞ */}
      <div
        className={getDropZoneClass()}
        onDragEnter={handleDragEnter}
        onDragLeave={handleDragLeave}
        onDragOver={handleDragOver}
        onDrop={handleDrop}
      >
        <div className="upload-content">
          {dragState.isDragOver ? (
            <>
              <div className="upload-icon">üìÅ</div>
              <div className="upload-text">–û—Ç–ø—É—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏</div>
            </>
          ) : (
            <>
              <div className="upload-icon">üé¨</div>
              <div className="upload-text">
                <strong>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª —Å—é–¥–∞</strong>
                <br />
                –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
              </div>
              <div className="upload-formats">
                –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: MP4, WebM, MOV, AVI
              </div>
            </>
          )}
        </div>
        
        {/* –°–∫—Ä—ã—Ç—ã–π input –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ */}
        <input
          type="file"
          accept="video/*"
          onChange={handleFileInput}
          className="file-input-hidden"
          disabled={!modelLoaded}
        />
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ */}
      {streamState.isFileMode && streamState.currentFile && (
        <div className="file-info">
          <div className="file-details">
            <div className="file-name">
              üìπ {streamState.fileName}
            </div>
            <div className="file-size">
              –†–∞–∑–º–µ—Ä: {formatFileSize(streamState.currentFile.size)}
            </div>
            <div className="file-type">
              –¢–∏–ø: {streamState.currentFile.type}
            </div>
          </div>
          <button onClick={onStopStream} className="btn-secondary">
            ‚ùå –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª
          </button>
        </div>
      )}
    </div>
  )
} 