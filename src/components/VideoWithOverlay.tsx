import { useRef, useEffect } from 'preact/hooks'
import type { Detection } from '../types/ml5'

interface VideoWithOverlayProps {
  cameraEnabled: boolean
  isAnalyzing: boolean
  modelLoaded: boolean
  onClassifyFrame: () => void
  videoRef: { current: HTMLVideoElement | null }
  canvasRef: { current: HTMLCanvasElement | null }
  detections: Detection[]
}

export function VideoWithOverlay({ 
  cameraEnabled, 
  isAnalyzing, 
  modelLoaded, 
  onClassifyFrame,
  videoRef,
  canvasRef,
  detections
}: VideoWithOverlayProps) {
  const overlayCanvasRef = useRef<HTMLCanvasElement>(null)

  // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
  useEffect(() => {
    console.log('üé¨ VideoWithOverlay –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω, videoRef.current:', videoRef.current)
    
    const checkVideoRef = () => {
      if (videoRef.current) {
        console.log('‚úÖ –í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω:', videoRef.current)
        videoRef.current.addEventListener('loadedmetadata', () => {
          console.log('üìπ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ')
        })
      } else {
        console.warn('‚ö†Ô∏è videoRef.current –≤—Å–µ –µ—â–µ null, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 100–º—Å')
        setTimeout(checkVideoRef, 100)
      }
    }
    
    checkVideoRef()
  }, [])

  // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ bounding boxes –Ω–∞ overlay canvas
  useEffect(() => {
    if (!overlayCanvasRef.current || !videoRef.current) return

    const canvas = overlayCanvasRef.current
    const ctx = canvas.getContext('2d')
    const video = videoRef.current

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≤–∏–¥–µ–æ
    const videoRect = video.getBoundingClientRect()
    const videoWidth = video.videoWidth || 640
    const videoHeight = video.videoHeight || 480
    const displayWidth = videoRect.width || 640
    const displayHeight = videoRect.height || 480

    console.log('üìπ –†–∞–∑–º–µ—Ä—ã –≤–∏–¥–µ–æ:', { videoWidth, videoHeight, displayWidth, displayHeight })

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä canvas —Ä–∞–≤–Ω—ã–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–º—É —Ä–∞–∑–º–µ—Ä—É –≤–∏–¥–µ–æ
    canvas.width = displayWidth
    canvas.height = displayHeight
    canvas.style.width = `${displayWidth}px`
    canvas.style.height = `${displayHeight}px`
    
    // –û—á–∏—â–∞–µ–º canvas
    ctx?.clearRect(0, 0, canvas.width, canvas.height)

    if (!ctx || detections.length === 0) return

    // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –¥–µ—Ç–µ–∫—Ü–∏—é
    detections.forEach((detection, index) => {
      const [x, y, width, height] = detection.bbox

      // –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è bounding box (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞)
      const hue = (detection.classId * 137) % 360
      const color = `hsl(${hue}, 70%, 50%)`
      const bgColor = `hsla(${hue}, 70%, 50%, 0.2)`

      // –†–∏—Å—É–µ–º –∑–∞–ª–∏–≤–∫—É
      ctx.fillStyle = bgColor
      ctx.fillRect(x, y, width, height)

      // –†–∏—Å—É–µ–º —Ä–∞–º–∫—É
      ctx.strokeStyle = color
      ctx.lineWidth = 3
      ctx.strokeRect(x, y, width, height)

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
      const label = `${detection.class} ${Math.round(detection.confidence * 100)}%`
      const fontSize = Math.max(12, Math.min(18, width / 8))
      ctx.font = `bold ${fontSize}px Arial`
      
      // –ò–∑–º–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
      const textMetrics = ctx.measureText(label)
      const textWidth = textMetrics.width
      const textHeight = fontSize

      // –†–∏—Å—É–µ–º —Ñ–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞
      const padding = 6
      const labelX = x
      const labelY = y > textHeight + padding ? y - padding : y + height + textHeight + padding

      ctx.fillStyle = color
      ctx.fillRect(labelX, labelY - textHeight - padding, textWidth + padding * 2, textHeight + padding * 2)

      // –†–∏—Å—É–µ–º –æ–±–≤–æ–¥–∫—É –¥–ª—è —Ç–µ–∫—Å—Ç–∞
      ctx.strokeStyle = '#000'
      ctx.lineWidth = 3
      ctx.strokeText(label, labelX + padding, labelY - padding)
      
      // –†–∏—Å—É–µ–º –±–µ–ª—ã–π —Ç–µ–∫—Å—Ç
      ctx.fillStyle = '#fff'
      ctx.fillText(label, labelX + padding, labelY - padding)
    })
  }, [detections, videoRef])

  if (!cameraEnabled) {
    return null
  }

  return (
    <div className="video-overlay-container">
      <video
        ref={(el) => {
          if (videoRef) {
            videoRef.current = el
            console.log('üé¨ –í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', el)
          }
        }}
        autoPlay
        muted
        playsInline
        controls
        className="video-element"
        style={{
          width: '100%',
          maxWidth: '640px',
          height: 'auto'
        }}
        onLoadedData={() => console.log('üìπ –í–∏–¥–µ–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')}
        onPlay={() => console.log('üìπ –í–∏–¥–µ–æ –Ω–∞—á–∞–ª–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ')}
        onError={(e) => console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∏–¥–µ–æ:', e)}
        onLoadedMetadata={() => console.log('üìπ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')}
      />
      
      {/* Canvas –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–π, –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–æ–≤–µ—Ä—Ö –≤–∏–¥–µ–æ */}
      <canvas
        ref={overlayCanvasRef}
        className="detection-overlay"
      />
      
      {/* –°–∫—Ä—ã—Ç—ã–π canvas –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–æ–≤ */}
      <canvas
        ref={canvasRef}
        style={{ display: 'none' }}
      />
      
      {/* –†—É—á–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è */}
      <div className="manual-controls">
        <button 
          onClick={onClassifyFrame}
          disabled={isAnalyzing || !modelLoaded}
          className="btn-analyze"
        >
          {isAnalyzing ? 'üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...' : 'üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å'}
        </button>
      </div>
    </div>
  )
} 