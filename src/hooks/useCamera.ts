import { useState, useEffect } from 'preact/hooks'
import type { CameraState, VideoDevice } from '../types/ml5'

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è iPhone –∫–∞–º–µ—Ä—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
function detectIPhoneCamera(label: string): { isIPhone: boolean; isContinuityCamera: boolean } {
  const labelLower = label.toLowerCase()
  
  // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è iPhone –∫–∞–º–µ—Ä—ã
  const iphonePatterns = [
    'iphone',
    'continuity camera',
    'continuity',
    '–∞–π—Ñ–æ–Ω',
    'iphone camera',
    'ios camera'
  ]
  
  const isIPhone = iphonePatterns.some(pattern => labelLower.includes(pattern))
  const isContinuityCamera = labelLower.includes('continuity') || (isIPhone && labelLower.includes('camera'))
  
  return { isIPhone, isContinuityCamera }
}

export function useCamera() {
  const [cameraState, setCameraState] = useState<CameraState>({
    enabled: false,
    stream: null,
    permissionGranted: null,
    devices: [],
    selectedDeviceId: null,
    isLoadingDevices: false
  })

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–¥–µ–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  const loadVideoDevices = async (): Promise<VideoDevice[]> => {
    try {
      setCameraState(prev => ({ ...prev, isLoadingDevices: true }))
      
      if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {
        throw new Error('MediaDevices API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è')
      }

      const devices = await navigator.mediaDevices.enumerateDevices()
      const videoDevices = devices
        .filter(device => device.kind === 'videoinput')
        .map(device => {
          const { isIPhone, isContinuityCamera } = detectIPhoneCamera(device.label || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞–º–µ—Ä–∞')
          
          return {
            deviceId: device.deviceId,
            groupId: device.groupId,
            kind: device.kind,
            label: device.label || `–ö–∞–º–µ—Ä–∞ ${device.deviceId.substring(0, 8)}`,
            isIPhone,
            isContinuityCamera
          } as VideoDevice
        })

      console.log('üìπ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', videoDevices)
      
      // –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ–º iPhone –∫–∞–º–µ—Ä—É
      const sortedDevices = videoDevices.sort((a, b) => {
        if (a.isContinuityCamera && !b.isContinuityCamera) return -1
        if (!a.isContinuityCamera && b.isContinuityCamera) return 1
        if (a.isIPhone && !b.isIPhone) return -1
        if (!a.isIPhone && b.isIPhone) return 1
        return 0
      })

      setCameraState(prev => ({ 
        ...prev, 
        devices: sortedDevices,
        isLoadingDevices: false,
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º iPhone –∫–∞–º–µ—Ä—É –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        selectedDeviceId: prev.selectedDeviceId || 
          (sortedDevices.find(d => d.isContinuityCamera)?.deviceId) ||
          (sortedDevices.find(d => d.isIPhone)?.deviceId) ||
          sortedDevices[0]?.deviceId || null
      }))

      return sortedDevices
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', error)
      setCameraState(prev => ({ ...prev, isLoadingDevices: false }))
      return []
    }
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
  useEffect(() => {
    if (cameraState.permissionGranted === true && cameraState.devices.length === 0) {
      loadVideoDevices()
    }
  }, [cameraState.permissionGranted])

  const requestPermission = async () => {
    try {
      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        throw new Error('MediaDevices API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ HTTPS –∏–ª–∏ –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä.')
      }

      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ
      const tempStream = await navigator.mediaDevices.getUserMedia({ video: true })
      tempStream.getTracks().forEach(track => track.stop())
      
      setCameraState(prev => ({ ...prev, permissionGranted: true }))
      console.log('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∫–∞–º–µ—Ä—É –ø–æ–ª—É—á–µ–Ω–æ')
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      await loadVideoDevices()
    } catch (error) {
      setCameraState(prev => ({ ...prev, permissionGranted: false }))
      console.error('‚ùå –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –∫–∞–º–µ—Ä—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ:', error)
    }
  }

  const selectDevice = (deviceId: string) => {
    setCameraState(prev => ({ ...prev, selectedDeviceId: deviceId }))
    console.log('üìπ –í—ã–±—Ä–∞–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:', deviceId)
  }

  const enableCamera = async (videoRef: { current: HTMLVideoElement | null }) => {
    try {
      console.log('üìπ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ...')
      
      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        throw new Error('MediaDevices API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ HTTPS –∏–ª–∏ –¥—Ä—É–≥–æ–π –±—Ä–∞—É–∑–µ—Ä.')
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–º–µ—Ä—ã
      const selectedDevice = cameraState.devices.find(d => d.deviceId === cameraState.selectedDeviceId)
      console.log('üìπ –í—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:', selectedDevice)

      const constraints: MediaStreamConstraints = {
        video: {
          deviceId: cameraState.selectedDeviceId ? { exact: cameraState.selectedDeviceId } : undefined,
          width: { ideal: 1280, min: 640 },
          height: { ideal: 720, min: 480 },
          frameRate: { ideal: 30, min: 15 }
        }
      }

      // –î–ª—è iPhone –∫–∞–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      if (selectedDevice?.isIPhone) {
        console.log('üì± –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è iPhone –∫–∞–º–µ—Ä—ã')
        const videoConstraints = constraints.video as MediaTrackConstraints
        constraints.video = {
          ...videoConstraints,
          width: { ideal: 1920, min: 1280 },
          height: { ideal: 1080, min: 720 },
          frameRate: { ideal: 60, min: 30 },
          facingMode: 'user' // –î–ª—è —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–æ–π –∫–∞–º–µ—Ä—ã iPhone
        }
      }
      
      const mediaStream = await navigator.mediaDevices.getUserMedia(constraints)

      console.log('üìπ MediaStream –ø–æ–ª—É—á–µ–Ω:', mediaStream)
      
      // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
      const videoTrack = mediaStream.getVideoTracks()[0]
      if (videoTrack) {
        const settings = videoTrack.getSettings()
        console.log('üìπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–µ–æ —Ç—Ä–µ–∫–∞:', settings)
        if (selectedDevice?.isIPhone) {
          console.log('üì± iPhone –∫–∞–º–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞!', settings)
        }
      }
      
      setCameraState(prev => ({ 
        ...prev, 
        stream: mediaStream,
        enabled: true 
      }))
      
      if (videoRef.current) {
        console.log('üìπ –ü–æ–¥–∫–ª—é—á–∞–µ–º –ø–æ—Ç–æ–∫ –∫ video —ç–ª–µ–º–µ–Ω—Ç—É')
        videoRef.current.srcObject = mediaStream
        
        videoRef.current.onloadedmetadata = () => {
          console.log('üìπ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
          console.log('üìπ –†–∞–∑–º–µ—Ä—ã –≤–∏–¥–µ–æ:', videoRef.current?.videoWidth, 'x', videoRef.current?.videoHeight)
          
          if (selectedDevice?.isIPhone) {
            console.log('üì± iPhone –∫–∞–º–µ—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!')
          }
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        videoRef.current.oncanplay = () => console.log('üìπ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é')
        videoRef.current.onplaying = () => console.log('üìπ –í–∏–¥–µ–æ –Ω–∞—á–∞–ª–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ')
        videoRef.current.onerror = (e) => console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–∞:', e)
        
        try {
          await videoRef.current.play()
          console.log('‚úÖ –ö–∞–º–µ—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∞ –∏ –≤–∏–¥–µ–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è!')
        } catch (playError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ:', playError)
        }
      } else {
        console.error('‚ùå videoRef.current is null - –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
        console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã')
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–¥–æ–∂–¥–∞—Ç—å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
        setTimeout(() => {
          if (videoRef.current) {
            console.log('üìπ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤–∏–¥–µ–æ')
            videoRef.current.srcObject = mediaStream
            videoRef.current.play().catch(e => console.error('‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', e))
          }
        }, 100)
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ:', error)
      
      let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ.'
      if (error instanceof Error) {
        if (error.name === 'NotFoundError') {
          errorMessage = '–ö–∞–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ.'
        } else if (error.name === 'NotAllowedError') {
          errorMessage = '–î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ.'
        } else if (error.name === 'NotReadableError') {
          errorMessage = '–ö–∞–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º.'
        }
      }
      
      alert(errorMessage)
    }
  }

  const disableCamera = () => {
    if (cameraState.stream) {
      cameraState.stream.getTracks().forEach(track => track.stop())
    }
    
    setCameraState(prev => ({
      ...prev,
      enabled: false,
      stream: null
    }))
    console.log('üìπ –ö–∞–º–µ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞')
  }

  const refreshDevices = async () => {
    await loadVideoDevices()
  }

  return {
    cameraState,
    requestPermission,
    enableCamera,
    disableCamera,
    selectDevice,
    refreshDevices,
    loadVideoDevices
  }
} 