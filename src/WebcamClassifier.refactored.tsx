import { useRef, useEffect } from 'preact/hooks'

// –•—É–∫–∏
import { useModel, useCamera, useStream, usePredictions, useAutoClassification } from './hooks'

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import { 
  ModelStatus, 
  StreamControls, 
  CameraControls, 
  VideoDisplay, 
  PredictionsDisplay,
  FileUpload,
  ModelSelector,
  DetectionDisplay
} from './components'

export function WebcamClassifier() {
  // –†–µ—Ñ—ã –¥–ª—è DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  const videoRef = useRef<HTMLVideoElement>(null)
  const canvasRef = useRef<HTMLCanvasElement>(null)
  
  // –•—É–∫–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const model = useModel()
  const camera = useCamera()
  const stream = useStream()
  const predictions = usePredictions()

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
  useEffect(() => {
    model.initialize()
  }, [])

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏
  const handleAnalyze = async () => {
    if (model.modelType === 'coco-ssd' && model.tensorflowModel) {
      // –î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å COCO-SSD (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
      await predictions.detectObjectsCocoSSD(model.tensorflowModel, videoRef, canvasRef)
    } else if (model.modelType === 'yolo' && model.tensorflowModel) {
      // –î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å YOLO (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ)
      await predictions.detectObjects(model.tensorflowModel, videoRef, canvasRef)
    } else if (model.modelType === 'mobilenet' && model.classifier) {
      // –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å MobileNet
      await predictions.classifyFrame(model.classifier, videoRef, canvasRef)
    }
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
  useAutoClassification(
    camera.cameraState.enabled || stream.streamState.isStreamMode || stream.streamState.isFileMode, 
    model.loaded, 
    handleAnalyze, 
    2000
  )

  return (
    <div class="webcam-classifier">
      <h1>üé• –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –≤–∏–¥–µ–æ —Å –ò–ò</h1>
      
      {/* –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ò–ò */}
      <div class="card">
        <ModelSelector 
          modelState={model}
          onSwitchModel={model.switchModel}
          disabled={predictions.isAnalyzing}
        />
      </div>

      {/* –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤–∏–¥–µ–æ */}
      <div class="card source-selector">
        <h3>üìπ –ò—Å—Ç–æ—á–Ω–∏–∫ –≤–∏–¥–µ–æ</h3>
        
        {/* –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä–æ–π */}
        <CameraControls
          cameraState={camera.cameraState}
          modelLoaded={model.loaded}
          onRequestPermission={camera.requestPermission}
          onEnableCamera={() => camera.enableCamera(videoRef)}
          onDisableCamera={camera.disableCamera}
        />

        {/* –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∏–º–æ–º */}
        <StreamControls
          streamState={stream.streamState}
          modelLoaded={model.loaded}
          onLoadStream={() => stream.loadStream(videoRef)}
          onStopStream={() => stream.stopStream(videoRef)}
          onUrlChange={stream.setUrl}
        />

        {/* –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ */}
        <FileUpload 
          streamState={stream.streamState}
          modelLoaded={model.loaded}
          onFileLoad={(file) => stream.loadFile(videoRef, file)}
          onStopStream={() => stream.stopStream(videoRef)}
        />
      </div>

      {/* –í–∏–¥–µ–æ –¥–∏—Å–ø–ª–µ–π */}
      <div class="card video-section">
        <VideoDisplay 
          videoRef={videoRef}
          canvasRef={canvasRef}
          cameraEnabled={camera.cameraState.enabled || stream.streamState.isStreamMode || stream.streamState.isFileMode}
          onClassifyFrame={handleAnalyze}
          isAnalyzing={predictions.isAnalyzing}
          modelLoaded={model.loaded}
        />
      </div>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ */}
      <div class="results-section">
        {/* –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è (MobileNet) */}
        {model.modelType === 'mobilenet' && predictions.predictions.length > 0 && (
          <div class="card">
            <PredictionsDisplay 
              predictions={predictions.predictions}
            />
          </div>
        )}

        {/* –î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ (YOLO/COCO-SSD) */}
        {(model.modelType === 'yolo' || model.modelType === 'coco-ssd') && (
          <div class="card">
            <DetectionDisplay 
              detections={predictions.detections}
              videoRef={videoRef}
              isAnalyzing={predictions.isAnalyzing}
            />
          </div>
        )}
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ */}
      <div class="info">
        <h3>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ</h3>
        <ul>
          <li><strong>ü§ñ –ú–æ–¥–µ–ª—å:</strong> {
            model.modelType === 'coco-ssd' ? 'COCO-SSD (–î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤)' :
            model.modelType === 'yolo' ? 'YOLO (–î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤)' : 
            'MobileNet (–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è)'
          }</li>
          <li><strong>üì° –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏:</strong> {model.loaded ? '‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞' : '‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...'}</li>
          <li><strong>üìπ –ö–∞–º–µ—Ä–∞:</strong> {camera.cameraState.enabled ? 'üü¢ –í–∫–ª—é—á–µ–Ω–∞' : 'üî¥ –í—ã–∫–ª—é—á–µ–Ω–∞'}</li>
          <li><strong>üåê –°—Ç—Ä–∏–º:</strong> {stream.streamState.isStreamMode ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}</li>
          <li><strong>üìÅ –§–∞–π–ª:</strong> {stream.streamState.isFileMode ? `üü¢ ${stream.streamState.fileName}` : 'üî¥ –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω'}</li>
          <li><strong>üîç –ê–Ω–∞–ª–∏–∑:</strong> {predictions.isAnalyzing ? '‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ...' : '‚úÖ –ì–æ—Ç–æ–≤'}</li>
          {(model.modelType === 'yolo' || model.modelType === 'coco-ssd') && (
            <li><strong>üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤:</strong> {predictions.detections.length}</li>
          )}
          {model.modelType === 'mobilenet' && (
            <li><strong>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:</strong> {predictions.predictions.length}</li>
          )}
        </ul>
      </div>
    </div>
  )
} 