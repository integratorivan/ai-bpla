import { useRef, useEffect, useState } from 'preact/hooks'

// –•—É–∫–∏
import { useModel, useCamera, useStream, usePredictions, useAutoClassification } from './hooks'

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import { 
  ModelStatus, 
  StreamControls, 
  CameraControls, 
  VideoDisplay, 
  VideoWithOverlay,
  FileUpload,
  ModelSelector,
  DetectionControls,
  DetectionStats
} from './components'

export function WebcamClassifier() {
  // –†–µ—Ñ—ã –¥–ª—è DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  const videoRef = useRef<HTMLVideoElement>(null)
  const canvasRef = useRef<HTMLCanvasElement>(null)
  
  // –•—É–∫–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const model = useModel()
  const camera = useCamera()
  const stream = useStream()
  const predictions = usePredictions()
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏
  const [detectionInterval, setDetectionInterval] = useState(500)

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–æ–¥–µ–ª–∏
  const handleAnalyze = async () => {
    if (model.modelState.modelType === 'coco-ssd' && model.modelState.tensorflowModel) {
      // –î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å COCO-SSD (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
      await predictions.detectObjectsCocoSSD(model.modelState.tensorflowModel, videoRef, canvasRef)
    } else if (model.modelState.modelType === 'yolov8' && model.modelState.tensorflowModel) {
      // –î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å YOLOv8 (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)
      await predictions.detectObjectsYOLOv8(model.modelState, videoRef, canvasRef)
    } else if (model.modelState.modelType === 'yolo' && model.modelState.tensorflowModel) {
      // –î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å YOLO (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ)
      await predictions.detectObjects(model.modelState.tensorflowModel, videoRef, canvasRef)
    } else {
      console.log('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –º–æ–¥–µ–ª–∏ –∏–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞')
    }
  }

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
  useAutoClassification(
    camera.cameraState.isActive || stream.streamState.isStreamMode || stream.streamState.isFileMode, 
    model.modelState.loaded, 
    handleAnalyze, 
    detectionInterval
  )

  return (
    <div class="webcam-classifier">
      {/* –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –ò–ò */}
      <div class="card">
        <ModelSelector 
          modelState={model.modelState}
          onSwitchModel={model.switchModel}
        />
      </div>

      {/* –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∑–∞–≥—Ä—É–∑–∫–∏ */}
      <div class="card">
        <ModelStatus 
          modelState={model.modelState}
          loadingProgress={model.loadingProgress}
        />
      </div>

      {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏ */}
      <div class="card">
        <DetectionControls
          isAnalyzing={predictions.isAnalyzing || predictions.isClassifying}
          modelLoaded={model.modelState.loaded}
          interval={detectionInterval}
          onIntervalChange={setDetectionInterval}
          onAnalyzeNow={handleAnalyze}
        />
      </div>

      {/* –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –≤–∏–¥–µ–æ */}
      <div class="card source-selector">
        <h3>üìπ –ò—Å—Ç–æ—á–Ω–∏–∫ –≤–∏–¥–µ–æ</h3>
        
        {/* –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–º–µ—Ä–æ–π */}
        <CameraControls
          cameraState={camera.cameraState}
          modelLoaded={model.modelState.loaded}
          onRequestPermission={camera.requestPermission}
          onEnableCamera={() => camera.enableCamera(videoRef)}
          onDisableCamera={camera.disableCamera}
          onSelectDevice={camera.selectDevice}
          onRefreshDevices={camera.refreshDevices}
        />

        {/* –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∏–º–æ–º */}
        <StreamControls
          streamState={stream.streamState}
          modelLoaded={model.modelState.loaded}
          onLoadStream={() => stream.loadStream(videoRef)}
          onStopStream={() => stream.stopStream(videoRef)}
          onUrlChange={stream.setUrl}
        />

        {/* –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ */}
        <FileUpload 
          streamState={stream.streamState}
          modelLoaded={model.modelState.loaded}
          onFileLoad={(file) => stream.loadFile(videoRef, file)}
          onStopStream={() => stream.stopStream(videoRef)}
        />
      </div>

      {/* –í–∏–¥–µ–æ –¥–∏—Å–ø–ª–µ–π */}
      <div class="card video-section">
        <VideoWithOverlay 
          videoRef={videoRef}
          canvasRef={canvasRef}
          cameraEnabled={camera.cameraState.isActive || stream.streamState.isStreamMode || stream.streamState.isFileMode}
          onClassifyFrame={handleAnalyze}
          isAnalyzing={predictions.isAnalyzing || predictions.isClassifying}
          modelLoaded={model.modelState.loaded}
          detections={predictions.detections}
          yolov8Detections={predictions.yolov8Detections}
          modelState={model.modelState}
        />
      </div>

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ - —Ç–æ–ª—å–∫–æ –¥–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ */}
      <div class="results-section">
        <div class="card">
          <DetectionStats 
            detections={predictions.detections}
            yolov8Detections={predictions.yolov8Detections}
            isAnalyzing={predictions.isAnalyzing || predictions.isClassifying}
            modelState={model.modelState}
          />
        </div>
      </div>

    </div>
  )
} 