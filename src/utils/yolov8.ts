import * as tf from '@tensorflow/tfjs'
import type { YOLOv8Detection, YOLOv8Config } from '../types/ml5'
import { YOLO_CLASSES, YOLOV8_DEFAULTS, YOLOV8_MODELS } from '../constants'

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ YOLOv8 –º–æ–¥–µ–ª–∏ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
 */
export async function loadYOLOv8Model(
  variant: keyof typeof YOLOV8_MODELS = 'yolov8s',
  onProgress?: (progress: number) => void
): Promise<tf.GraphModel | null> {
  console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ YOLOv8 –º–æ–¥–µ–ª–∏: ${variant}`)

  const modelConfig = YOLOV8_MODELS[variant]
  console.log(`üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å: ${modelConfig.name} (${modelConfig.size})`)

  // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ –æ—á–µ—Ä–µ–¥–∏
  for (let i = 0; i < modelConfig.urls.length; i++) {
    const url = modelConfig.urls[i]
    console.log(`üåê –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å URL ${i + 1}/${modelConfig.urls.length}: ${url}`)

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º tf.loadGraphModel –¥–ª—è YOLOv8 (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–∏–º–µ—Ä–µ)
      const model = await tf.loadGraphModel(url, {
        onProgress: (fractions) => {
          const progress = fractions * 100
          console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏: ${progress.toFixed(1)}%`)
          onProgress?.(fractions)
        }
      })

      console.log('‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!')
      console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏:', {
        inputs: model.inputs.map(input => ({
          name: input.name,
          shape: input.shape,
          dtype: input.dtype
        })),
        outputs: model.outputs.map(output => ({
          name: output.name, 
          shape: output.shape,
          dtype: output.dtype
        }))
      })

      // Warming up –º–æ–¥–µ–ª–∏ (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–∏–º–µ—Ä–µ)
      console.log('üî• Warming up –º–æ–¥–µ–ª–∏...')
      if (model.inputs[0]?.shape) {
        const dummyInput = tf.ones(model.inputs[0].shape)
        const warmupResults = model.execute(dummyInput)
        
        // –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
        tf.dispose([warmupResults, dummyInput])
        console.log('‚úÖ Warming up –∑–∞–≤–µ—Ä—à–µ–Ω!')
      }

      return model

    } catch (error) {
      console.warn(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å URL ${url}:`, error)
      
      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π URL, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π
      if (i < modelConfig.urls.length - 1) {
        console.log('üîÑ –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π URL...')
        continue
      }
    }
  }

  console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å YOLOv8 –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞')
  return null
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ –º–æ–¥–µ–ª–∏ YOLOv8 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * (–ø–æ–∫–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã)
 */
function createDemoYOLOv8Model(): tf.LayersModel {
  console.log('üîÑ –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∑–∞–≥–ª—É—à–∫—É YOLOv8...')
  
  try {
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const input = tf.input({ 
      shape: [640, 640, 3],
      name: 'yolo_input'
    })
    
    // –û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å: —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã—Ö–æ–¥—É
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º globalAveragePooling2d —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å
    let x = tf.layers.globalAveragePooling2d({}).apply(input) as tf.SymbolicTensor
    
    // –ü—Ä–æ—Å—Ç–æ–π –≤—ã—Ö–æ–¥: 10 –¥–µ—Ç–µ–∫—Ü–∏–π * 84 –∑–Ω–∞—á–µ–Ω–∏—è (–≤–º–µ—Å—Ç–æ 8400)
    const output = tf.layers.dense({ 
      units: 10 * 84, // –¢–æ–ª—å–∫–æ 10 –¥–µ—Ç–µ–∫—Ü–∏–π –¥–ª—è –¥–µ–º–æ
      activation: 'sigmoid',
      name: 'yolo_output'
    }).apply(x) as tf.SymbolicTensor

    const reshapedOutput = tf.layers.reshape({ 
      targetShape: [10, 84],
      name: 'yolo_reshape'
    }).apply(output) as tf.SymbolicTensor

    const model = tf.model({ 
      inputs: input, 
      outputs: reshapedOutput,
      name: 'minimal_yolov8_demo'
    })
    
    console.log('‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–µ–º–æ –º–æ–¥–µ–ª—å YOLOv8 —Å–æ–∑–¥–∞–Ω–∞')
    console.log('üìä –í—Ö–æ–¥–Ω–∞—è —Ñ–æ—Ä–º–∞:', model.inputs[0].shape)
    console.log('üìä –í—ã—Ö–æ–¥–Ω–∞—è —Ñ–æ—Ä–º–∞:', model.outputs[0].shape)
    
    return model
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–µ–º–æ –º–æ–¥–µ–ª–∏:', error)
    throw error
  }
}

/**
 * –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è YOLOv8
 */
export function preprocessImage(
  image: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement,
  modelInputShape: number[]
): tf.Tensor {
  return tf.tidy(() => {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ç–µ–Ω–∑–æ—Ä
    const tensor = tf.browser.fromPixels(image)
    
    // –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–¥ –≤—Ö–æ–¥–Ω—É—é —Ñ–æ—Ä–º—É –º–æ–¥–µ–ª–∏ [1, height, width, 3]
    const [, height, width] = modelInputShape
    const resized = tf.image.resizeBilinear(tensor, [height, width])
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [0, 1]
    const normalized = resized.div(255.0)
    
    // –î–æ–±–∞–≤–ª—è–µ–º batch dimension
    const batched = normalized.expandDims(0)
    
    return batched
  })
}

/**
 * –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ YOLOv8
 */
export function postprocessYOLOv8Results(
  predictions: tf.Tensor | tf.Tensor[],
  imageWidth: number,
  imageHeight: number,
  modelInputShape: number[],
  confidenceThreshold: number = 0.5
): YOLOv8Detection[] {
  // YOLOv8 –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ [batch, 84, 8400] 
  // –≥–¥–µ 84 = 4 (bbox coords) + 80 (classes)
  const pred = Array.isArray(predictions) ? predictions[0] : predictions
  const [, , modelHeight, modelWidth] = modelInputShape
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–Ω–∑–æ—Ä–∞
  const predData = pred.dataSync()
  
  // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
  const xScale = imageWidth / modelWidth
  const yScale = imageHeight / modelHeight
  
  const detections: YOLOv8Detection[] = []
  const numDetections = pred.shape[2] || 8400 // 8400 –∏–ª–∏ fallback
  const numClasses = 80
  
  for (let i = 0; i < numDetections; i++) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã bbox (center_x, center_y, width, height)
    const centerX = predData[i * (4 + numClasses) + 0]
    const centerY = predData[i * (4 + numClasses) + 1] 
    const width = predData[i * (4 + numClasses) + 2]
    const height = predData[i * (4 + numClasses) + 3]
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–ª–∞—Å—Å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
    let maxScore = 0
    let maxClassIndex = 0
    
    for (let j = 0; j < numClasses; j++) {
      const score = predData[i * (4 + numClasses) + 4 + j]
      if (score > maxScore) {
        maxScore = score
        maxClassIndex = j
      }
    }
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ—Ä–æ–≥—É confidence
    if (maxScore >= confidenceThreshold) {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç [x1, y1, width, height]
      const x1 = (centerX - width / 2) * xScale
      const y1 = (centerY - height / 2) * yScale
      const x2 = (centerX + width / 2) * xScale  
      const y2 = (centerY + height / 2) * yScale
      
      detections.push({
        bbox: [
          Math.max(0, x1),
          Math.max(0, y1), 
          Math.min(imageWidth, x2) - Math.max(0, x1),
          Math.min(imageHeight, y2) - Math.max(0, y1)
        ] as [number, number, number, number],
        class: YOLO_CLASSES[maxClassIndex] || `unknown_${maxClassIndex}`,
        classId: maxClassIndex,
        confidence: maxScore,
        area: width * height,
        normalized: false
      })
    }
  }
  
  return detections
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ YOLOv8 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 */
export function createYOLOv8Config(variant: keyof typeof YOLOV8_MODELS = 'yolov8s'): YOLOv8Config {
  const modelInfo = YOLOV8_MODELS[variant]
  
  return {
    modelUrl: modelInfo.urls[0], // –ü–µ—Ä–≤—ã–π URL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    confThreshold: YOLOV8_DEFAULTS.CONFIDENCE_THRESHOLD,
    iouThreshold: YOLOV8_DEFAULTS.IOU_THRESHOLD,
    inputSize: YOLOV8_DEFAULTS.INPUT_SIZE,
    maxDetections: YOLOV8_DEFAULTS.MAX_DETECTIONS,
    modelVariant: variant
  }
}

/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ YOLOv8 –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
 */
export async function runYOLOv8Inference(
  model: tf.GraphModel,
  imageElement: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement,
  config: YOLOv8Config
): Promise<YOLOv8Detection[]> {
  console.log('üîç –í—ã–ø–æ–ª–Ω—è–µ–º YOLOv8 –∏–Ω—Ñ–µ—Ä–µ–Ω—Å...')
  
  // –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
  const preprocessed = preprocessImage(imageElement, [1, config.inputSize, config.inputSize, 3])
  
  try {
    // –ò–Ω—Ñ–µ—Ä–µ–Ω—Å
    const startTime = performance.now()
    const predictions = model.execute(preprocessed) as tf.Tensor
    const inferenceTime = performance.now() - startTime
    
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞: ${inferenceTime.toFixed(1)}ms`)
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    let originalWidth: number
    let originalHeight: number
    
    if (imageElement instanceof HTMLVideoElement) {
      originalWidth = imageElement.videoWidth || 640
      originalHeight = imageElement.videoHeight || 480
    } else if (imageElement instanceof HTMLImageElement) {
      originalWidth = imageElement.naturalWidth || imageElement.width || 640
      originalHeight = imageElement.naturalHeight || imageElement.height || 480
    } else {
      // HTMLCanvasElement
      originalWidth = imageElement.width || 640
      originalHeight = imageElement.height || 480
    }
    
    // –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞
    const detections = postprocessYOLOv8Results(
      predictions,
      originalWidth,
      originalHeight,
      [1, config.inputSize, config.inputSize, 3],
      config.confThreshold
    )
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${detections.length} –æ–±—ä–µ–∫—Ç–æ–≤`)
    
    // –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
    preprocessed.dispose()
    predictions.dispose()
    
    return detections.slice(0, config.maxDetections)
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ YOLOv8:', error)
    preprocessed.dispose()
    return []
  }
} 